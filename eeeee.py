import discord
import datetime
import json
import os
import asyncio
import re
from discord.ext import commands
from discord import app_commands
from typing import Optional, Union, List
from pathlib import Path

class RegisterForm(discord.ui.Modal):
    def __init__(self):
        super().__init__(title="‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà Dek‡πÄ‡∏ö‡∏µ‡∏¢‡∏ß")
        
        self.add_item(discord.ui.TextInput(
            label="‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô :",
            placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô [‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô]",
            required=True,
            style=discord.TextStyle.short,
            max_length=100
        ))
        
        self.add_item(discord.ui.TextInput(
            label="‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏≤‡∏¢‡∏∏ :",
            placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏≤‡∏¢‡∏∏ (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)",
            required=True,
            style=discord.TextStyle.short,
            max_length=2
        ))
        
        self.add_item(discord.ui.TextInput(
            label="‡πÄ‡∏û‡∏® :",
            placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏û‡∏® (‡∏ä‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏ç‡∏¥‡∏á)",
            required=True,
            style=discord.TextStyle.short,
            max_length=5
        ))
        
        self.add_item(discord.ui.TextInput(
            label="‡∏ä‡∏≠‡∏ö‡πÄ‡∏•‡∏Ç‡πÑ‡∏£ :",
            placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)",
            required=True,
            style=discord.TextStyle.short,
            max_length=10
        ))
        
        self.add_item(discord.ui.TextInput(
            label="‡∏ä‡∏≠‡∏ö‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£ :",
            placeholder="‡∏ä‡∏≠‡∏ö‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£",
            required=True,
            style=discord.TextStyle.short,
            max_length=100
        ))

    async def on_submit(self, interaction: discord.Interaction):
        full_name = self.children[0].value
        age = self.children[1].value
        gender = self.children[2].value
        phone_number = self.children[3].value
        weapon = self.children[4].value
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• (‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
        if not re.match(r'^[a-zA-Z\s]*$', full_name):
            return await interaction.response.send_message("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô", ephemeral=False)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏≤‡∏¢‡∏∏ (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
        if not age.isdigit() or int(age) < 1 or int(age) > 99:
            return await interaction.response.send_message("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 1-99 ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô", ephemeral=True)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏® (‡∏ä‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏ç‡∏¥‡∏á)
        if gender.lower() not in ["‡∏ä‡∏≤‡∏¢", "‡∏´‡∏ç‡∏¥‡∏á"]:
            return await interaction.response.send_message("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏û‡∏®‡πÄ‡∏õ‡πá‡∏ô '‡∏ä‡∏≤‡∏¢' ‡∏´‡∏£‡∏∑‡∏≠ '‡∏´‡∏ç‡∏¥‡∏á' ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô", ephemeral=True)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
        if not phone_number.isdigit() or len(phone_number) < 1 or len(phone_number) > 2:
            return await interaction.response.send_message("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 9-10 ‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô", ephemeral=True)
        
        await interaction.response.send_message("‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö", ephemeral=True)
        
        config = load_json("database/Config.json")
        
        if "Setup_slytherin_verify" not in config or "channel_id" not in config["Setup_slytherin_verify"]:
            return await interaction.followup.send("‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", ephemeral=True)
        
        channel_id = int(config["Setup_slytherin_verify"]["channel_id"])
        channel = interaction.guild.get_channel(channel_id)
        
        if not channel:
            return await interaction.followup.send("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", ephemeral=True)
        
        embed = discord.Embed(
            description=f"‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: {interaction.user.mention} ({interaction.user.id})",
            color=discord.Color.green()
        )
        embed.set_author(name=interaction.user.display_name, icon_url=interaction.user.display_avatar.url)
        embed.add_field(name="üë§ ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô", value=f"#Ô∏è‚É£  {full_name}", inline=False)
        embed.add_field(name="üìë ‡∏≠‡∏≤‡∏¢‡∏∏", value=f"#Ô∏è‚É£  {age}", inline=False)
        embed.add_field(name="üìë ‡πÄ‡∏û‡∏®", value=f"#Ô∏è‚É£  {gender}", inline=False)
        embed.add_field(name="üìë ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö", value=f"#Ô∏è‚É£  {phone_number}", inline=False)
        embed.add_field(name="üìë ‡∏ä‡∏≠‡∏ö‡∏ó‡∏≥‡πÑ‡∏£", value=f"#Ô∏è‚É£  {weapon}", inline=False)
        embed.add_field(name="‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á", value=f"<t:{int(datetime.datetime.now().timestamp())}:F>", inline=False)
        embed.set_thumbnail(url=f"{interaction.user.display_avatar.url}")
        embed.set_footer(text=f"ID : {interaction.user.id}", icon_url="https://cdn.discordapp.com/attachments/1381964473103028309/1381969271562965022/images.png?ex=684972ae&is=6848212e&hm=164b6a5f4aaccff29c4964b6be62daf0c517719ae29b9c1ef93ab7f6740b7f9a&")
        
        verify_button = discord.ui.Button(
            label="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£", 
            emoji="‚úÖ", 
            style=discord.ButtonStyle.green,
            custom_id=f"verify_doc_{interaction.user.id}"
        )
        
        view = discord.ui.View()
        view.add_item(verify_button)
        
        message = await channel.send(embed=embed, view=view)
        
        current_time = datetime.datetime.now().strftime("%d/%m/%Y | ‡πÄ‡∏ß‡∏•‡∏≤ %H:%M ‡∏ô‡∏≤‡∏ó‡∏µ %S ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
        
        users_data = load_json("database/Users.json")
        
        if str(interaction.user.id) not in users_data:
            users_data[str(interaction.user.id)] = {
                "user_id": str(interaction.user.id),
                "send_info": "1",
                "verify_info": "0",
                "user_system": [
                    {
                        "send_info_user": {
                            "message_link_embed_info": f"https://discord.com/channels/{interaction.guild.id}/{channel.id}/{message.id}",
                            "time": current_time,
                            "send_info_point": "1",
                            "full_name": full_name,
                            "age": age,
                            "gender": gender,
                            "phone_number": phone_number,
                            "weapon": weapon
                        },
                        "verify_info_user": {
                            "give_role_id": "",
                            "verify_by_user_id": "",
                            "time": "",
                            "verify_info_point": "0"
                        }
                    }
                ]
            }
        else:
            users_data[str(interaction.user.id)]["send_info"] = "1"
            users_data[str(interaction.user.id)]["user_system"][0]["send_info_user"] = {
                "message_link_embed_info": f"https://discord.com/channels/{interaction.guild.id}/{channel.id}/{message.id}",
                "time": current_time,
                "send_info_point": "1",
                "full_name": full_name,
                "age": age,
                "gender": gender,
                "phone_number": phone_number,
                "weapon": weapon
            }
        
        save_json("database/Users.json", users_data)

class SlytherinBot(commands.Bot):
    def __init__(self):
        intents = discord.Intents.default()
        intents.message_content = True
        intents.members = True
        
        super().__init__(command_prefix="!", intents=intents)
        self.cooldowns = {}
        
    async def setup_hook(self):
        await self.create_directories_and_files()
        print(f"üü¢ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß | {datetime.datetime.now().strftime('%d/%m/%Y | ‡πÄ‡∏ß‡∏•‡∏≤ %H:%M ‡∏ô‡∏≤‡∏ó‡∏µ %S ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ')}")
        
    async def on_ready(self):
        try:
            print(f"üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á...")
            await self.tree.sync()
            print(f"‚úÖ ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß | {datetime.datetime.now().strftime('%d/%m/%Y | ‡πÄ‡∏ß‡∏•‡∏≤ %H:%M ‡∏ô‡∏≤‡∏ó‡∏µ %S ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ')}")
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: {e}")
        
        await self.display_bot_info()
        
    async def create_directories_and_files(self):
        os.makedirs("database", exist_ok=True)
        
        if not os.path.exists("database/Config.json"):
            default_config = {
                "token": "",
                "server_id": "",
                "user_id": [
                    "",
                    ""
                ],
                "role_id": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Setup_slytherin_verify": {
                    "channel_id": "",
                    "give_role_id": ""
                }
            }
            save_json("database/Config.json", default_config)
            print("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå Config.json ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
            
        if not os.path.exists("database/Users.json"):
            default_users = {}
            save_json("database/Users.json", default_users)
            print("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå Users.json ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
            
        if not os.path.exists("database/Embed.json"):
            default_embed = {}
            save_json("database/Embed.json", default_embed)
            print("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå Embed.json ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
    
    async def display_bot_info(self):
        config = load_json("database/Config.json")
        server_count = len(self.guilds)
        
        print("=" * 50)
        print(f"üü¢ ‡∏ö‡∏≠‡∏ó‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß: {self.user.name} ({self.user.id})")
        print(f"üåê ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {server_count}")
        
        if config.get("server_id"):
            guild = self.get_guild(int(config["server_id"]))
            if guild:
                print(f"üè∞ ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å: {guild.name} ({guild.id})")
            else:
                print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏ô Config")
        else:
            print(f"‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î server_id ‡πÉ‡∏ô Config.json")
            
        print("=" * 50)
        
    async def on_interaction(self, interaction: discord.Interaction):
        if interaction.type == discord.InteractionType.component:
            custom_id = interaction.data.get("custom_id", "")
            
            user_id = interaction.user.id
            current_time = datetime.datetime.now().timestamp()
            
            if user_id in self.cooldowns:
                if current_time - self.cooldowns[user_id] < 2: 
                    await interaction.response.send_message("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á", ephemeral=True)
                    return
            
            self.cooldowns[user_id] = current_time
            
            if custom_id == "register_slytherin_home":
                await interaction.response.send_modal(RegisterForm())
                
            elif custom_id.startswith("verify_doc_"):
                target_user_id = custom_id.split("_")[-1]
                await self.verify_document(interaction, target_user_id)
                
        await self.process_app_commands(interaction)
                
    async def verify_document(self, interaction: discord.Interaction, target_user_id: str):
        config = load_json("database/Config.json")
        users_data = load_json("database/Users.json")
        
        has_permission = False
        
        if str(interaction.user.id) in config.get("user_id", []):
            has_permission = True
            
        user_roles = [str(role.id) for role in interaction.user.roles]
        for role_id in config.get("role_id", []):
            if role_id in user_roles:
                has_permission = True
                break
        
        if not has_permission:
            return await interaction.response.send_message(
                f"‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÇ‡∏î‡∏¢‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å <@&{config['role_id'][0]}> ‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö", 
                ephemeral=True
            )
        
        if target_user_id not in users_data:
            return await interaction.response.send_message(
                "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ", 
                ephemeral=True
            )
        
        if users_data[target_user_id]["verify_info"] == "1":
            verified_button = discord.ui.Button(
                label="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", 
                emoji="‚úÖ", 
                style=discord.ButtonStyle.green,
                disabled=True
            )
            view = discord.ui.View()
            view.add_item(verified_button)
            
            await interaction.message.edit(view=view)
            return await interaction.response.send_message(
                "‚úÖ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß", 
                ephemeral=True
            )
        
        role_id = config.get("Setup_slytherin_verify", {}).get("give_role_id", "")
        if not role_id:
            return await interaction.response.send_message(
                "‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏¢‡∏®‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏´‡πâ", 
                ephemeral=True
            )
        
        guild = interaction.guild
        member = guild.get_member(int(target_user_id))
        role = guild.get_role(int(role_id))
        
        if not member:
            return await interaction.response.send_message(
                "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå", 
                ephemeral=True
            )
        
        if not role:
            return await interaction.response.send_message(
                "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏¢‡∏®‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏´‡πâ", 
                ephemeral=True
            )
        
        bot_member = guild.get_member(self.user.id)
        if not bot_member.guild_permissions.manage_roles or not bot_member.guild_permissions.manage_nicknames:
            return await interaction.response.send_message(
                "‚ùå ‡πÇ‡∏õ‡∏£‡∏î‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏ó‡∏ô‡∏±‡πâ‡∏ô‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á ‡∏°‡∏≠‡∏ö‡∏¢‡∏®, ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö", 
                ephemeral=True
            )
        
        if bot_member.top_role <= role:
            return await interaction.response.send_message(
                "‚ùå ‡πÇ‡∏õ‡∏£‡∏î‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏ó‡∏ô‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏¢‡∏®‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏´‡πâ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö", 
                ephemeral=True
            )
        
        form_data = interaction.message.embeds[0].fields
        ic_name = ""
        
        for field in form_data:
            if field.name == "üë§ ‡∏ä‡∏∑‡πà‡∏≠ (IC)":
                ic_name = field.value
                break
        
        try:
            await member.add_roles(role)
            
            if ic_name:
                clean_ic_name = ic_name.replace("#Ô∏è‚É£  ", "").strip()
                
                if len(clean_ic_name) > 32:
                    clean_ic_name = clean_ic_name[:32] 
                
                try:
                    await member.edit(nick=clean_ic_name)
                except discord.Forbidden:
                    await interaction.response.send_message(
                        "‚úÖ ‡∏ö‡∏≠‡∏ó‡πÑ‡∏î‡πâ‡∏°‡∏≠‡∏ö‡∏¢‡∏®‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠",
                        ephemeral=True
                    )
                    return
            
            current_time = datetime.datetime.now().strftime("%d/%m/%Y | ‡πÄ‡∏ß‡∏•‡∏≤ %H:%M ‡∏ô‡∏≤‡∏ó‡∏µ %S ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
            
            users_data[target_user_id]["verify_info"] = "1"
            users_data[target_user_id]["user_system"][0]["verify_info_user"] = {
                "give_role_id": role_id,
                "verify_by_user_id": str(interaction.user.id),
                "time": current_time,
                "verify_info_point": "1"
            }
            
            save_json("database/Users.json", users_data)
            
            verified_button = discord.ui.Button(
                label="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", 
                emoji="‚úÖ", 
                style=discord.ButtonStyle.green,
                disabled=True
            )
            view = discord.ui.View()
            view.add_item(verified_button)
            
            await interaction.message.edit(view=view)
            
            await interaction.response.send_message(
                "‚úÖ ‡∏ö‡∏≠‡∏ó‡πÑ‡∏î‡πâ‡∏°‡∏≠‡∏ö‡∏¢‡∏®‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", 
                ephemeral=True
            )
            
            try:
                embed = discord.Embed(
                    description=f"‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: {member.mention}",
                    color=discord.Color.blue()
                )
                embed.add_field(name="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£", value="‚úÖ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", inline=False)
                embed.add_field(name="‡πÄ‡∏ß‡∏•‡∏≤", value=f"<t:{int(datetime.datetime.now().timestamp())}:F>", inline=False)
                embed.set_footer(text=f"ID : {target_user_id}", icon_url="https://cdn.discordapp.com/attachments/1381964473103028309/1381969271562965022/images.png?ex=684972ae&is=6848212e&hm=164b6a5f4aaccff29c4964b6be62daf0c517719ae29b9c1ef93ab7f6740b7f9a&")
                
                await member.send(embed=embed)
            except discord.Forbidden:
                pass
            
        except discord.Forbidden:
            await interaction.response.send_message(
                "‚ùå ‡∏ö‡∏≠‡∏ó‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏ö‡∏¢‡∏®", 
                ephemeral=True
            )
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}", 
                ephemeral=True
            )

    async def process_app_commands(self, interaction: discord.Interaction):
        if interaction.type != discord.InteractionType.application_command:
            return
        
    pass

bot = SlytherinBot()

@bot.tree.command(name="setup_slytherin_verify", description="‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏ö‡πâ‡∏≤‡∏ô")
async def setup_slytherin_verify(interaction: discord.Interaction):
    config = load_json("database/Config.json")
    has_permission = False
    
    if str(interaction.user.id) in config.get("user_id", []):
        has_permission = True
        
    user_roles = [str(role.id) for role in interaction.user.roles]
    for role_id in config.get("role_id", []):
        if role_id in user_roles:
            has_permission = True
            break
    
    if not has_permission:
        return await interaction.response.send_message(
            f"‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ", 
            ephemeral=True
        )
    
    await interaction.response.send_message("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô...", ephemeral=True)
    
    embed = discord.Embed(
        description="‡πÄ‡∏°‡∏ô‡∏π‡∏Å‡∏£‡∏≠‡∏Å‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡πÄ‡∏ã‡∏¥‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå Dek‡πÄ‡∏ö‡∏µ‡∏¢‡∏ß ",
        color=discord.Color.green()
    )
    
    embed.add_field(
        name="‡πÄ‡∏î‡πá‡∏Å‡πÜ ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏£‡∏ö‡∏Å‡∏ß‡∏ô‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠",
        value="‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏¢‡∏®‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡πÑ‡∏°‡πà‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏ô‡πä‡∏≤‡∏≤",
        inline=False
    )
    
    embed.set_image(url="https://cdn.discordapp.com/attachments/1381964473103028309/1381969271562965022/images.png?ex=684972ae&is=6848212e&hm=164b6a5f4aaccff29c4964b6be62daf0c517719ae29b9c1ef93ab7f6740b7f9a&")
    embed.set_footer(text="By James Karlov Dek Dahood | 2025", icon_url="https://cdn.discordapp.com/attachments/1381964473103028309/1381969271562965022/images.png?ex=684972ae&is=6848212e&hm=164b6a5f4aaccff29c4964b6be62daf0c517719ae29b9c1ef93ab7f6740b7f9a&")
    
    register_button = discord.ui.Button(
        label="‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡πÄ‡∏ã‡∏¥‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå", 
        emoji="üü¢", 
        style=discord.ButtonStyle.green,
        custom_id="register_slytherin_home"
    )
    
    view = discord.ui.View(timeout=None)
    view.add_item(register_button)
    
    message = await interaction.channel.send(embed=embed, view=view)
    
    embed_data = load_json("database/Embed.json")
    
    current_time = datetime.datetime.now().strftime("%d/%m/%Y | ‡πÄ‡∏ß‡∏•‡∏≤ %H:%M ‡∏ô‡∏≤‡∏ó‡∏µ %S ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
    
    embed_data["message_link_embed_Setup_slytherin_verify"] = {
        "message_link": f"https://discord.com/channels/{interaction.guild.id}/{interaction.channel.id}/{message.id}",
        "use_commands_by_user_id": str(interaction.user.id),
        "time": current_time
    }
    
    save_json("database/Embed.json", embed_data)
    
    await interaction.followup.send(
        f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", 
        ephemeral=True
    )

@bot.tree.command(name="setconfig", description="‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö")
@app_commands.describe(
    role="‡∏¢‡∏®‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡πâ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏î‡πá‡∏Å‡πÑ‡∏î‡πâ",
    user="‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡πâ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏î‡πá‡∏Å‡πÑ‡∏î‡πâ",
    channel_id="‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£",
    roleverify="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏®‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ ‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏î‡∏¢‡πÑ‡∏õ‡∏ó‡∏±‡∏ö‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏Å‡πà‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö"
)
async def setconfig(
    interaction: discord.Interaction, 
    role: Optional[discord.Role] = None,
    user: Optional[discord.Member] = None,
    channel_id: Optional[discord.TextChannel] = None,
    roleverify: Optional[discord.Role] = None
):
    config = load_json("database/Config.json")
    has_permission = False
    
    if str(interaction.user.id) in config.get("user_id", []):
        has_permission = True
        
    user_roles = [str(role_id) for role_id in [r.id for r in interaction.user.roles]]
    for role_id in config.get("role_id", []):
        if role_id in user_roles:
            has_permission = True
            break
    
    if not has_permission:
        return await interaction.response.send_message(
            f"‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ", 
            ephemeral=True
        )
    
    if not any([role, user, channel_id, roleverify]):
        return await interaction.response.send_message(
            "‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å", 
            ephemeral=True
        )
    
    if role:
        if str(role.id) not in config.get("role_id", []):
            config.setdefault("role_id", []).append(str(role.id))
            save_json("database/Config.json", config)
            await interaction.response.send_message(
                f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏® {role.mention} ‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", 
                ephemeral=True
            )
        else:
            await interaction.response.send_message(
                f"‚ö†Ô∏è ‡∏¢‡∏® {role.mention} ‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß", 
                ephemeral=True
            )
        return
    
    if user:
        if str(user.id) not in config.get("user_id", []):
            config.setdefault("user_id", []).append(str(user.id))
            save_json("database/Config.json", config)
            await interaction.response.send_message(
                f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° {user.mention} ‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", 
                ephemeral=True
            )
        else:
            await interaction.response.send_message(
                f"‚ö†Ô∏è {user.mention} ‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß", 
                ephemeral=True
            )
        return
    
    if channel_id:
        config.setdefault("Setup_slytherin_verify", {})["channel_id"] = str(channel_id.id)
        save_json("database/Config.json", config)
        await interaction.response.send_message(
            f"‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á {channel_id.mention} ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", 
            ephemeral=True
        )
        return
    
    if roleverify:
        config.setdefault("Setup_slytherin_verify", {})["give_role_id"] = str(roleverify.id)
        save_json("database/Config.json", config)
        await interaction.response.send_message(
            f"‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏¢‡∏® {roleverify.mention} ‡πÄ‡∏õ‡πá‡∏ô‡∏¢‡∏®‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏´‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", 
            ephemeral=True
        )
        return

@bot.tree.command(name="info", description="‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£")
@app_commands.describe(
    userdele="‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏Å‡∏£‡∏≠‡∏Å‡∏°‡∏≤",
    usercheck="‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πà‡∏ô‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏¢‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡πà‡∏≤‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏£‡∏≠‡∏Å"
)
async def info(
    interaction: discord.Interaction, 
    userdele: Optional[discord.Member] = None,
    usercheck: Optional[discord.Member] = None
):
    config = load_json("database/Config.json")
    has_permission = False
    
    if str(interaction.user.id) in config.get("user_id", []):
        has_permission = True
        
    user_roles = [str(role_id) for role_id in [r.id for r in interaction.user.roles]]
    for role_id in config.get("role_id", []):
        if role_id in user_roles:
            has_permission = True
            break
    
    if not has_permission:
        return await interaction.response.send_message(
            f"‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ", 
            ephemeral=True
        )
    
    if not any([userdele, usercheck]):
        return await interaction.response.send_message(
            "‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å", 
            ephemeral=True
        )
    
    users_data = load_json("database/Users.json")
    
    if userdele:
        if str(userdele.id) in users_data:
            del users_data[str(userdele.id)]
            save_json("database/Users.json", users_data)
            await interaction.response.send_message(
                f"‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á {userdele.mention} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", 
                ephemeral=True
            )
        else:
            await interaction.response.send_message(
                f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á {userdele.mention} ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö", 
                ephemeral=True
            )
        return
    
    if usercheck:
        if str(usercheck.id) in users_data:
            user_info = users_data[str(usercheck.id)]
            
            embed = discord.Embed(
                title=f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á {usercheck.display_name}",
                color=discord.Color.blue()
            )
            
            if user_info.get("send_info") == "1":
                embed.add_field(
                    name="‚úÖ ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
                    value="‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß",
                    inline=False
                )
                
                if "user_system" in user_info and user_info["user_system"]:
                    send_info = user_info["user_system"][0].get("send_info_user", {})
                    embed.add_field(
                        name="‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á",
                        value=send_info.get("time", "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"),
                        inline=True
                    )
                    
                    message_link = send_info.get("message_link_embed_info", "")
                    if message_link:
                        embed.add_field(
                            name="‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°",
                            value=f"[‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà]({message_link})",
                            inline=True
                        )
            else:
                embed.add_field(
                    name="‚ùå ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
                    value="‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
                    inline=False
                )
            
            if user_info.get("verify_info") == "1":
                embed.add_field(
                    name="‚úÖ ‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô",
                    value="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß",
                    inline=False
                )
                
                if "user_system" in user_info and user_info["user_system"]:
                    verify_info = user_info["user_system"][0].get("verify_info_user", {})
                    
                    verify_by = verify_info.get("verify_by_user_id", "")
                    if verify_by:
                        embed.add_field(
                            name="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÇ‡∏î‡∏¢",
                            value=f"<@{verify_by}>",
                            inline=True
                        )
                    
                    embed.add_field(
                        name="‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô",
                        value=verify_info.get("time", "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"),
                        inline=True
                    )
                    
                    role_id = verify_info.get("give_role_id", "")
                    if role_id:
                        embed.add_field(
                            name="‡∏¢‡∏®‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö",
                            value=f"<@&{role_id}>",
                            inline=True
                        )
            else:
                embed.add_field(
                    name="‚ùå ‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô",
                    value="‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô",
                    inline=False
                )
            
            await interaction.response.send_message(embed=embed, ephemeral=True)
        else:
            await interaction.response.send_message(
                f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á {usercheck.mention} ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö", 
                ephemeral=True
            )
        return

def load_json(filename):
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_json(filename, data):
    directory = os.path.dirname(filename)
    if directory and not os.path.exists(directory):
        os.makedirs(directory)
        
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

def main():
    if not os.path.exists("database/Config.json"):
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå Config.json ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå...")
        os.makedirs("database", exist_ok=True)
        
        default_config = {
            "token": "",
            "server_id": "",
            "user_id": [
                "",
                ""
            ],
            "role_id": [
                "",
                "",
                "",
                "",
                "",
                ""
            ],
            "Setup_slytherin_verify": {
                "channel_id": "",
                "give_role_id": ""
            }
        }
        
        save_json("database/Config.json", default_config)
        print("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå Config.json ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
        print("‚ÑπÔ∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ token ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå Config.json ‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏±‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
        return

    config = load_json("database/Config.json")
    token = config.get("token", "")
    
    if not token:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Token ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå Config.json")
        print("‚ÑπÔ∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ token ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå Config.json ‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏±‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
        return
    
    print("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ö‡∏≠‡∏ó...")
    bot.run(token)

if __name__ == "__main__":
    main()